AWSTemplateFormatVersion: 2010-09-09
Resources:
  securityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: allows rds inbound
      GroupName: securityGroupFprRDS
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1
          
  rds:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      AllocatedStorage: 20
      AllowMajorVersionUpgrade: false
      AutoMinorVersionUpgrade: false
      DBInstanceClass: db.t2.micro
      VPCSecurityGroups:
        - Fn::GetAtt: [ securityGroup, GroupId ]
      EnableCloudwatchLogsExports:
        - postgresql
      Engine: postgres
      MasterUsername: demo
      MasterUserPassword: demo8898
      Port: 5432
      Tags:
        - Key: name
          Value: rds_demo
          
  EnvSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: allows all inbound
      GroupName: securityGroupForBatchENV
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1
          
  BatchComputeEnv:
    Type: AWS::Batch::ComputeEnvironment
    Properties:
      ComputeEnvironmentName: BatchComputeEnv
      ComputeResources:
        MaxvCpus: 1
        SecurityGroupIds:
          - Fn::GetAtt: [ EnvSecurityGroup, GroupId ]
        Subnets:
          - subnet-78796110
        Type: FARGATE
      ServiceRole: !Ref RoleForCompEnv
      Type: MANAGED  
      
  RoleForCompEnv:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyName: policyDemo
          PolicyDocument: {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "VisualEditor0",
              "Effect": "Allow",
              "Action": [
                  "ecr:GetRegistryPolicy",
                  "ecr:DescribeImageScanFindings",
                  "ecr:GetLifecyclePolicyPreview",
                  "ecr:DescribeRegistry",
                  "ecr:GetDownloadUrlForLayer",
                  "ecr:BatchGetImage",
                  "ecr:DescribeImages",
                  "ecr:GetAuthorizationToken",
                  "ecr:BatchCheckLayerAvailability",
                  "ecr:GetRepositoryPolicy",
                  "ecr:GetLifecyclePolicy"
              ],
              "Resource": "*"
            }
          ]
        }

      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
                - batch.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonRDSFullAccess
        - arn:aws:iam::aws:policy/AmazonElasticContainerRegistryPublicReadOnly
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
        - arn:aws:iam::aws:policy/AmazonECS_FullAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        - arn:aws:iam::aws:policy/SecretsManagerReadWrite
      Description: role for env to access rds and logs
      RoleName: RoleForCompEnv     
      
  BatchQueue:
    Type: 'AWS::Batch::JobQueue'
    Properties:
      ComputeEnvironmentOrder:
        - ComputeEnvironment: !Ref BatchComputeEnv
          Order: 1
      JobQueueName: jobQueue
      Priority: 1
     
  eventrule:
    Type: AWS::Events::Rule
    Properties:
      Description: eventrule to trigger job every 5 min
      Name: eventrule
      ScheduleExpression: cron(0/5 * * * ? *)
      Targets:
        - Arn: !Ref BatchQueue
          BatchParameters:
            JobDefinition: !Ref jobDef
            JobName: job1
          Id: job
          RoleArn:
            Fn::GetAtt: [ RoleForeventrule , Arn ]  
            
  RoleForeventrule:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyName: policyDemo
          PolicyDocument: {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Action": [
                    "batch:SubmitJob"
                ],
                "Resource": "*"
              }
            ]
          }

      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Description: role for event to access batch
      RoleName: RoleForEventRule            
      
  jobDef:
    Type: AWS::Batch::JobDefinition
    Properties:
      ContainerProperties:
        Command:
          - python
          - demo.py
          - Fn::GetAtt: [ rds, Endpoint.Address ]
        ResourceRequirements:
          - Type: VCPU
            Value: 1
          - Type: MEMORY
            Value: 2048
        ExecutionRoleArn: !GetAtt RoleForCompEnv.Arn
        Image: 183650099165.dkr.ecr.ap-south-1.amazonaws.com/newinsert:latest
        LogConfiguration:
          LogDriver: awslogs
        NetworkConfiguration:
          AssignPublicIp: ENABLED
      JobDefinitionName: JobDef
      PlatformCapabilities:
        - FARGATE
      Type: container
